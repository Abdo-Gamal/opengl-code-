#include <GL/glut.h>
#include <math.h>




float angle = 1.0;          //must
void s1(void)
{
	float r, z, sin_theta, cos_theta, x, y;
	


	glBegin(GL_LINE_STRIP);
	r = 50.0f;
	float angle1 = 0.0f;

	for (z = -r; z < r; z += .1f) {
		//x = r cos(theta) cos(phi)
		//y = r cos(theta) sin(phi)
		//z = r sin(theta) 


		sin_theta = z / r;
		cos_theta = sqrt(1 - sin_theta * sin_theta);
		//C runtime functions sin() and cos() accept angle values measured in radians
		x = r * sin(angle1) * cos_theta;
		y = r * cos(angle1) * cos_theta;
		angle1 += 0.1f;
		// Specify the point and move the Z value up a little
		glVertex3f(x, y, z);
	}
	// Done drawing points
	glEnd();


}

void drawcube(void){

	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0, 1.0, 1.0);
	//glMatrixMode(GL_MODELVIEW);


	glRotatef(angle, 0.0, 1.0, 0.0);   /// y axis

	glPushMatrix();
	glColor3f(0.0, 1.0, 0.0);
	s1();
	glTranslated(0.0f,150.0f,0.0f);
	glColor3f(1.0, 0.0, 1.0);
	s1();
	glColor3f(1.0, 1.0, 0.0);
	glTranslated(0.0f, 150.0f, 0.0f);
	s1();

	glPopMatrix();

	glFlush();
	glutSwapBuffers();
}

void keyboard(unsigned char key, int x, int y)
{
	switch (key) {
	case 'q':
	case 'Q':
		exit(0);
		break;
	}
}
void mouse(int btn, int state, int x, int y) {

	if (state == GLUT_DOWN)
	{
		if (btn == GLUT_LEFT_BUTTON)
			angle = angle + 1.0f;
		else if (btn == GLUT_RIGHT_BUTTON)
			angle = angle - 1.0f;
		else	angle = 0.0f;
	}
}


int main(int argc, char** argv) {

	glutInit(&argc, argv);
	glutInitWindowSize(500, 500);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutCreateWindow("Glut rotate");
	glutMouseFunc(mouse);
	glutKeyboardFunc(keyboard);
	glutDisplayFunc(drawcube);

	glutIdleFunc(drawcube);   //// new  redrow the objeft when   glut not work
	 
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-500.0, 500.0, -500.0, 500.0, -500.0, 500.0);
	glRotatef(30.0, 1.0, 0.0, 0.0);     ///////////////x axis
	//glMatrixMode(GL_MODELVIEW);

	glClearColor(0.0, 0.0, 0.0, 0.0);
	glutMainLoop();

	return(0);

}




