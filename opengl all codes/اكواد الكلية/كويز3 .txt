#include <gl/glut.h>
#include <math.h>
#include<iostream>

#define GL_PI 3.1415f

static GLfloat xRot = 0.0f;
static GLfloat yRot = 0.0f;

void RenderScene(void) {
	GLfloat x, z, angle;
	glClear(GL_COLOR_BUFFER_BIT);
	glPushMatrix();
	glRotatef(xRot, 1.0f, 0.0f, 0.0f);
	glRotatef(yRot, 0.0f, 1.0f, 0.0f);

	GLfloat R = 40.0f;
	GLfloat y = 0.0f;
	glBegin(GL_LINE_STRIP);
	for (angle = 0.0f; angle <= (2.0 * GL_PI) * 5.5f; angle += 0.2f)
	{
		x = R * sin(angle);
		z = R * cos(angle);
		glVertex3f(x, y, z);
		R -= 0.2f;
		y += 0.2f;
	}
	glEnd();
	glPopMatrix();
	glutSwapBuffers();
}

void SetupRC() {
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glColor3f(0.0f, 1.0f, 0.0f);
}

void SpecialKeys(int key, int x, int y) {
	{
		if (key == GLUT_KEY_UP) xRot -= 5.0f;
		if (key == GLUT_KEY_DOWN)  xRot += 5.0f;
		if (key == GLUT_KEY_LEFT) yRot -= 5.0f;
		if (key == GLUT_KEY_RIGHT) yRot += 5.0f;
	}
	glutPostRedisplay();
}

void ChangeSize(int w, int h) {
	GLfloat nRange = 100.0f;
	if (h == 0)	h = 1;
	glViewport(0, 0, w, h);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h)
		glOrtho(-nRange, nRange, -nRange * h / w, nRange * h / w, -nRange, nRange);
	else
		glOrtho(-nRange * w / h, nRange * w / h, -nRange, nRange, -nRange, nRange);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutCreateWindow("Points Example");
	glutReshapeFunc(ChangeSize);
	glutSpecialFunc(SpecialKeys);
	glutDisplayFunc(RenderScene);
	SetupRC();
	glutMainLoop();

	return 0;
}

